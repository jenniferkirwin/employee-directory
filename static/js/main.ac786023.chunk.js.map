{"version":3,"sources":["utilities/API.js","components/UserTable.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","headerCells","title","field","UserTable","users","React","useEffect","API","then","data","dispatch","type","resData","catch","err","console","log","useReducer","state","action","foundUserData","userData","columns","options","search","debounceInterval","draggable","showTitle","useStyles","makeStyles","root","background","margin","NavBar","classes","AppBar","position","className","Toolbar","Typography","variant","height","App","Container","maxWidth","Grid","container","spacing","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wVAEe,EACC,WACZ,OAAOA,IAAMC,IACX,+CCDAC,EAAc,CAClB,CAAEC,MAAO,KAAMC,MAAO,MACtB,CAAED,MAAO,OAAQC,MAAO,QACxB,CAAED,MAAO,SAAUC,MAAO,SAC1B,CAAED,MAAO,QAASC,MAAO,SACzB,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,iBAGd,SAASC,EAAT,GAA4B,EAARC,MAEjCC,IAAMC,WAAU,WACdC,IACCC,MAAK,gBAAEC,EAAF,EAAEA,KAAF,OAAYC,EAAS,CAACC,KAAM,aAAcC,QAASH,OACxDI,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACzB,IANsC,MAQZG,sBAAW,SAACC,EAAOC,GAC9C,OAAQA,EAAOR,MACb,IAAK,aACH,OAAO,2BACFO,GADL,IAEEE,cAAeD,EAAOP,UAE1B,QACE,OAAOM,KAEV,CAACE,cAAe,KAlBsB,mBAQlCC,EARkC,KAQxBX,EARwB,KAoBzC,OACE,kBAAC,IAAD,CACAY,QACEtB,EAEFS,KACEY,EAASD,cAEXG,QAAW,CACTC,QAAQ,EACRC,iBAAkB,IAClBC,WAAW,EACXC,WAAW,K,uCCvCXC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,8CACZC,OAAQ,gBAIG,SAASC,IAEtB,IAAMC,EAAUN,IAEhB,OACE,kBAACO,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAWH,EAAQJ,MAC3C,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,wBCXR,IAAMZ,EAAYC,YAAW,CAC3BC,KAAM,CACJW,OAAQ,QACRV,WAAY,iDAsBDW,MAlBf,WAEE,IAAMR,EAAUN,IAEhB,OACE,yBAAKS,UAAWH,EAAQJ,MACtB,kBAACG,EAAD,MACA,kBAACU,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACb,kBAAC9C,EAAD,WCdQ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdnD,OAAM,SAAAoD,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.ac786023.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function () {\r\n    return axios.get(\r\n      \"https://jsonplaceholder.typicode.com/users\"\r\n    );\r\n  }\r\n};","import React, { useReducer } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport API from '../utilities/API';\r\n\r\nconst headerCells = [\r\n  { title: 'ID', field: 'id' },\r\n  { title: 'Name', field: 'name' },\r\n  { title: 'E-Mail', field: 'email' },\r\n  { title: 'Phone', field: 'phone' },\r\n  { title: 'Website', field: 'website' },\r\n  { title: 'Company', field: 'company.name' }\r\n];\r\n\r\nexport default function UserTable({users}) {\r\n\r\n  React.useEffect(() => {\r\n    API.getEmployees()\r\n    .then(({data}) => dispatch({type: \"foundUsers\", resData: data}))\r\n    .catch(err => console.log(err));\r\n  }, []);\r\n\r\n  const [userData, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      case \"foundUsers\":\r\n        return {\r\n          ...state,\r\n          foundUserData: action.resData\r\n        }\r\n      default:\r\n        return state;\r\n    }\r\n  }, {foundUserData: []});\r\n\r\n  return (\r\n    <MaterialTable\r\n    columns = {\r\n      headerCells\r\n    }\r\n    data = {\r\n      userData.foundUserData\r\n    }        \r\n    options = {{\r\n      search: true,\r\n      debounceInterval: 500,\r\n      draggable: false,\r\n      showTitle: false   \r\n    }}\r\n  />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    background: 'linear-gradient(to right, #614385, #516395)',\r\n    margin: '0 0 25px 0'\r\n  }\r\n});\r\n\r\nexport default function NavBar() {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\" className={classes.root}>\r\n      <Toolbar>\r\n        <Typography variant=\"h6\">\r\n          Employee Directory\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport './App.css';\nimport UserTable from './components/UserTable';\nimport NavBar from './components/NavBar';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    height: '100vh', \n    background: 'linear-gradient(to right, #ece9e6, #ffffff)'\n  }\n});\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <NavBar></NavBar>\n      <Container maxWidth=\"xl\">\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <UserTable></UserTable>\n          </Grid>      \n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}